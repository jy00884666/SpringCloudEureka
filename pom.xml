<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    
    <groupId>org.spring.cloud.parent</groupId>
    <artifactId>SpringCloudEureka</artifactId>
    <version>1.0-SNAPSHOT</version>
    <!--项目产生的构件类型，例如jar、war、ear、pom。插件可以创建他们自己的构件类型，所以前面列的不是全部构件类型-->
    <packaging>pom</packaging>
    
    <!--项目的名称, Maven产生的文档用-->
    <name>SpringCloudEureka</name>
    <!-- 项目的详细描述, Maven 产生的文档用。  当这个元素能够用HTML格式描述时（例如，CDATA中的文本会被解析器忽略，就可以包含HTML标 签），
    不鼓励使用纯文本描述。如果你需要修改产生的web站点的索引页面，你应该修改你自己的索引页文件，而不是调整这里的文档。-->
    <description>Demo project for Spring Boot</description>
    
    <!-- 父项目的坐标。如果项目中没有规定某个元素的值，那么父项目中的对应值即为项目的默认值。
             坐标包括group ID，artifact ID和 version。 -->
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.3.1.RELEASE</version>
        <relativePath/>
    </parent>
    
    <!-- 模块（有时称作子项目） 被构建成项目的一部分。列出的每个模块元素是指向该模块的目录的相对路径 -->
    <modules>
        <!--子项目相对路径-->
        <module>eureka-server</module>
        <module>service-hi</module>
    </modules>

    <!-- properties里面可以定义用户自己的属性值,这些属性值可以在POM文件的任何地方同通过${x}的方式来引用 -->
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <java.version>1.8</java.version>
        <!--SpringBoot 与 SpringCloud版本 必须要精确否则启动会报错-->
        <!--<spring-cloud.version>Finchley.RELEASE</spring-cloud.version>-->
        <spring-cloud.version>Hoxton.SR12</spring-cloud.version>
    </properties>
    
    <dependencies>
        <!--SpringBoot测试,空的起步依赖-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>
    
    <!-- 继承自该项目的所有子项目的默认依赖信息。这部分的依赖信息不会被立即解析,而是当子项目声明一个依赖
        （必须描述group ID和artifact ID信息），如果group ID和artifact ID以外的一些信息没有描述，则通过
            group ID和artifact ID匹配到这里的依赖，并使用这里的依赖信息。 -->
    <dependencyManagement>
        <dependencies>
            <!-- spring colud 基本依赖 -->
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>
    
    <!--
        build 标签的子标签大致包含三个主体部分
        1.约定的目录结构
            <sourceDirectory>D:\idea\maven-test\src\main\java</sourceDirectory>
            <scriptSourceDirectory>D:\idea\maven-test\src\main\scripts</scriptSourceDirectory>
            <testSourceDirectory>D:\idea\maven-test\src\test\java</testSourceDirectory>
            <outputDirectory>D:\idea\maven-test\target\classes</outputDirectory>
            <testOutputDirectory>D:\idea\maven-test\target\test-classes</testOutputDirectory>
            <resources>
                <resource>
                    <directory>D:\idea\maven-test\src\main\resources</directory>
                </resource>
            </resources>
            <testResources>
                <testResource>
                    <directory>D:\idea\maven-test\src\test\resources</directory>
                </testResource>
            </testResources>
            <directory>D:\idea\maven-test\target</directory>
            <finalName>maven-test-1.0-SNAPSHOT</finalName>
        2.备用插件管理
            <pluginManagement>
                <plugins>
                    <plugin>
                        <artifactId>maven-antrun-plugin</artifactId>
                        <version>1.3</version>
                    </plugin>
                    <plugin>
                        <artifactId>maven-assembly-plugin</artifactId>
                        <version>2.2-beta-5</version>
                    </plugin>
                    <plugin>
                        <artifactId>maven-dependency-plugin</artifactId>
                        <version>2.8</version>
                    </plugin>
                    <plugin>
                        <artifactId>maven-release-plugin</artifactId>
                        <version>2.5.3</version>
                    </plugin>
                </plugins>
            </pluginManagement>
        3.生命周期插件
            <plugins>
                <plugin>
                    <artifactId>maven-clean-plugin</artifactId>
                    <version>2.5</version>
                    <executions>
                        <execution>
                            <id>default-clean</id>
                            <phase>clean</phase>
                            <goals>
                                <goal>clean</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>
            </plugins>
    -->
    <build>
        <plugins>
            <plugin>
                <!-- spring boot提供的maven打包插件。可打直接可运行的jar包或war包。 -->
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>
    
    
</project>